앞으로 테스트 코드 작성방법

controller ==> 1. WebTestConfic  클래스를 상속 받는 junit 클래스를 생성
			   2. mockMvc 객체를 이용하여 테스트 코드 작성
			   
service, repository ==> 1. ModelTestConfig 클래스를 상속받는 junit 클래스를 생성
						2. 테스트 대상 스프링 빈을 주입받아 테스트 코드 작성
						
실습
Login 기능 마이그레이션 (jsp/servlet ==> Spring)
	
	1. 로그인 화면 요청
		- jsp위치(webapp/.... ==> 보안을 위해서 url로 접근할수없는 부분으로 위치 이동 web/WEB-INF/views)
				 common/header.jsp, left.jsp, common_lib.jsp)
				 
				 webapp/login.jsp		 ==> webapp/WEB-INF/views/login.jsp						   
				 webapp/common/*.jsp	 ==> webapp/WEB-INF/views/common/*.jsp						
			 
			 
			 
			 
			 
login 화면 요청 처리 controller ------------spring 작업----------------

	1. kr.or.ddit.login.LoginController 생성
	2. @Controller 등록
	3. @RequestMapping ==> class? method?
		- 기존 : @WebServlet("/loginController")
		- 변경 : login/view ==> localhost/login/view 
	
	4. method 구현(login.jsp forward하려고 하는거니까 파라미터 필요없음)
		- 해당 요청을 처리하기 위해서 파라미터가 필요한가? ==> 놉. 필요없음
		
		요청위임(servlet)
		req.getRequestDispatcher("/login.jsp").forward(req, resp);
		
		요청위임(spring)
		- 메소드 반환 문자열 (view name)
			/WEB-INF/views/ + 메소드 반환 뷰네임 + .jsp
			/WEB-INF/views/login.jsp
			
	5. 테스트 코드 구현		
			
			

Controller 테스트 코드 구현시 사용하는 메소드
	.perform
		get(), post(), fileUpload()
		param("파라미터명", "파라미터값")
		
	.andExpect
		status(), model(), view()
		
	.andReturn() ==> MvcResult 라는 객체를 반환한다.
					 ModelAndView mav = mvcResult.getModelAndView();
					 
	.andDo() ==> 부가적인 작업 할때 많이 쓰임(결과 출력)		
		.andDo(print()) - 로거를 좀 이쁘게 볼수있다. 테스트 성공해야지 콘솔창에 뜸
		


파라미터가 있는 스프링 컨트롤러	
- LoginController : 로그인 요청 처리 메소드 개발

1. userVo 준비(작성 안한 필드 추가)

2. webapp/main.jsp ==> webapp/WEB-INF/views/main.jsp로 복사

3. 로그인 처리 로직 작성(메소드)
	3-1. 파라미터 작업
		
		기존 : request.getParameter("userid")
		==> 1. 파라미터가 몇개 없어서 value object를 사용하지 않는 경우
				- 스프링 컨트롤러 메소드에 파라미터와 동일한 이름의 인자를 선언
				- 스프링 mvc모듈에서 request 객체의 파라미터를 메소드 인자로 자동바인딩 한다.
				
			2. 파라미터를 담을 value object가 있는 경우
				- value object를 스프링 메소드 인자로 선언
				- 파라미터 이름과 value object의 필드의 이름이 동일한 경우 자동으로 바인딩
								
	
	3-2. 로그인 성공시
		세션객체에 S_USER 속성으로 사용자 정보를 vo객체에 저장
		
		기존 : HttpSession session = request.getSession();
			   session.setAttribute("S_USER:, userVo);
		==>
			스프링 컨트롤러 메소드에 추가할 수 있는 인자 타입
			servlet api : HttpServletRequest, HttpServletResponse, HttpSession
						  application ==> getServletContext()
					   
	3-3. 로그인 실패시
		login.jsp로 리다이렉트
		
		기존 : response.sendRedirect("/login.jsp");
		==>	 spring에서는 컨트롤러 메소드가 viewName을 반환하게 되어있음
			 redirect에 대한 viewName : "redirect:" + 리다이렉트 주소
			 


스프링 컨트롤러 메소드 인자
1. servlet API - 3개 (위에 적어놓음)

2. value Object - spring Command 객체 / Form 객체 : form 전송을 통해 보내진 파라미터를 받는 객체 
				- primitive type 
				- 개별 객체(String, Date)
	
2.1 ErrorBindingResult : Validation 검증시 에러 메시지를 저장
						 ********** 꼭 지켜야 하는 규칙(순서가 존재한다.)
						 해당 value 객체 다음 이어서 메소드인자로 선언해야한다.
						 public String process(UserVo, userVo, binding객체) O
						 public String process(UserVo, userVo, HttpSession session, binding객체) X
	

3. model - 속성 담을 때 (request scope)

4. Reader/Writer, Input/OutputStream
   servlet에서 html응답 생성 
   파일 다운로드 응답 : OutputStream 
   
   사용자 요청 정보(파일 업로드): InputStream 
   
5. RedirectAttributes : 리다이렉트 페이지에 1회성 속성 전달 
		request.setAttribute("msg", "에러발생");
		reponse.sendRedirect("리다이렉트.jsp");
		
		리다이렉트.jsp에서 msg 속성 조회 ??
		




스프링 컨트롤러 메소드 반환 타입
1. String : viewName
2. ModelAndView : 모델과 뷰 객체가 합쳐진 객체
3. View 객체 (view name 이 아니고 객체!)
4. void : response, outStream을 통해서 개발자가 직접 응답을 생성한 경우
		==> 파일다운로드
		




스프링 컨트롤러에서 사용 가능한 어노테이션
@Controller
@RequestMapping
@RequestMapping("url") ==> path @RequestMapping(path="url")
		
1. url mapping : path  ***
 
2. HTTP 메소드 제한 : method **

3. 파라미터 제한 : params
		- 특정 파라미터의 값이 정해진 값과 일치할때만 해당 요청을 처리
		- params = {"userid=brown" , "여러개" , "올수있음"}

AJAX - 4,5
4. 요청 content-type 제한 : consumes
		consumes = "application/json" ==> 사용자가 요청을 json 문자열로 보냈을때만 처리 가능함

5. 응답 허용 content-type, ACCEPT 제한 : 응답으로 json요청 때만 처리 가능
		produces = "application/json"
		
6. 특정 헤더 제한 :
		headers = "Content-Type=text/plain"		
		




Spring - mybatis 연동

예전 
	MybatisUtil, getSqlSqssion()

Spring
	sqlSession 객체에 해당하는 sqlSessionTemplate 객체를 dao객체에 주입받아서 사용(util클래스한테 요청을 하는게 아니고 주입받은 상태에서 쓰는거)					
	sqlSessionTemplate ==> SqlSessionFactoryBean ==> 1. 설정파일(매퍼파일) , 2. Data Source
			
			
			
			
			
			

사용자 전체 리스트 개발 URL : user/allUser
1. spring controller 생성 : kr.or.ddit.user.web.UserController.allUser()

2. 필요한 스프링 빈 : userService
	** 조회한 사용자 리스트 정보 model 객체에 담기(userList)

3. webapp/user/allUser.jsp ==> webapp/WEB-INF/views/user/allUser.jsp

*. UserControllerTest 생성, allUser 메소드 테스트



	

































			    