server side 검증

1. Spring Validator
	구현방법 : Interface Validator를 구현

2. JSR-303(규약은 계속 추가/수정 됨)
	어노테이션을 이용 ==> command 객체에 적용
	
	이건 진짜 간단한거밖에 안돼. 네이버에서 2년내에 사용한 비번 못쓰게 하는 그런 규약은 코드를 짜야함 
	@NotNull
	@Min, @Max
	@Size(min, max)
	@Pattern(정규식)
	
	==> 

1번은 구체적으로 작성이 가능하고, 복잡한 로직 검증이 가능함
2번은 간단한 형태로만 검증이 가능함.	
	
resourceBundle 스프링 빈 등록 (ReloadableResourceBundleMessageSource 얘를 등록 할거야?)

container
	
	전반적으로는 근데 항상 이렇지는 않다.
	
	- parent : Model 
	
	- child : Controller
	
지금까지 한거 정리
1. resourceBundle  파일 준비 (error.prperties...)
2. messageSource 스프링 빈 등록(ReloadableResourceBundleMessageSource)
3. validator , controller에 validate 메소드 실행
4. jsp <form:errors path="userVo.userid"/> ==> 해당 필드에 에러가 있을떄만 메시지를 표시 	




Spring Message 쓰는 방법
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>    
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>   



Spring Message : <spring:message code="LANG" arguments="brown"/>






JSON을 스프링에서 쓰는방법

MappingJackson2JsonView 이걸 사용하면 내가 쓴 코드를 json으로 변경? 해주는거. 메이븐에서 추가해야함(Jackson Databind » 2.12.1)

ViewResolver : 컨트롤러가 반환한 뷰이름으로 부터 view 객체를 구하는 역할!!!!
ViewResolver - Controller가 반환하는 view name을 이용하여 해당 요청을 생성할 view객체를 선택

여러개의 view resolver 등록이 가능하다.
view resolver의 우선 순위를 설정하여 적용될 순서를 결정할 수 있다.

기존 : InternalResourceViewResolver
추가 : BeanNameViewResolver
		==> 컨트롤러가 반환하는 view name과 동일한 이름의 스프링 빈이 있으면 해당 스프링 빈을 view 객체로 사용한다.
		
order순서를 어떻게 해야하냐? 라고 궁금하지
근데,
***** InternalResourceViewResolver	 사용시 주의해야할 것이 있다!!!
	==> prefix, surfix 조합에 의해 생성된 문자열에 해당하는 리소스(jsp)가 없어도 검증을 하지않고 응답으로 내보낸다.
	즉 파일이 존재하지 않을 경우 404에러 발생
	
	따라서 우선순위를 가장 최하위로 둔다. 제일 마지막에 실행해!!
	
	BeanNameViewResolver얘는 컨트롤러랑 상관이 있어. 로직이랑은 상관없어서 부모(모델) 쪽에 안쓰고 차일드한테씀
	그게 application.xml
	


회사에서 요구하는 기술
1. ajax
2. 엑셀 다운로드
3. tomcat 9 version


ExcelDownloadView - 엑셀 다운로드 하려고

- 우리 회사의 전체 직원 리스트




1. Tiles JSP Support
2. Tiles Servlet Support
3. Tiles Extras
3개다 최신버전으로 다운받아라 메이븐


뭐시기.apache.org
이렇게 하면 보통 뜨는데,

tiles.apache.org



http://tiles.apache.org/framework/tutorial/basic/pages.html

<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE tiles-definitions PUBLIC
       "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN"
       "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">
<tiles-definitions>
  <definition name="myapp.homepage" template="/layouts/classic.jsp">
    <put-attribute name="title" value="Tiles tutorial homepage" />
    <put-attribute name="header" value="/tiles/banner.jsp" />
    <put-attribute name="menu" value="/tiles/common_menu.jsp" />
    <put-attribute name="body" value="/tiles/home_body.jsp" />
    <put-attribute name="footer" value="/tiles/credits.jsp" />
  </definition>
</tiles-definitions>



<definition name="tiles.*.*" extends="basic.layout">
  	<put-attribute name="body" value="/WEB-INF/views/{1}/{2}Body.jsp"/>
 </definition>

이렇게 해서 {1} 은 user 이고
{2}는 pagingUser

근데 이게 싫으면 그냥 적음됨

  <definition name="tiles.user.pagingUser" extends="basic.layout">
  	<put-attribute name="body" value="/WEB-INF/views/user/pagingUserBody.jsp"></put-attribute>
  </definition>
  
  원래이거
  
  
  
  
  
  
 Interceptor / Filter 차이점 - 이거 이해하는게 오늘 제일 중요!
 나머지는 다 응용이었음.
 
 viewResolver 실행 순서
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


