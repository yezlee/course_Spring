spring 설정
1. xml
2. java
3. java + xml 섞어서 사용해도 된다.
** 설정파일을 용도에 따라 여러개로 분리하는 것도 가능


xml에 값을 표시하는 방법은 문자열 밖에 없음
value="5"

5라고 표시한 값을 java의 문자열 타입으로 해석할지, 숫자 타입으로 해석할지는 
해당 class의 필드 타입을 보고 스프링이 결정하게 된다.

대다수의 타입은 스프링 프레임워크가 타입을 자동으로 변경하는 것이 가능하나
날짜 타입에 대해서는 국가별, 사용자별 표기형식이 다르기 때문에
프레임 워크에서 임의로 타입 변화을 하는것이 불가능하다.
(UserVo reg_dt 컬럼)

스프링 프레임 워크에서 타입 변환이 필요ㅕ한 경우는 크게 두가지가 있다.
1. 값을 주입할때 (DI)
2. 컨트롤러에서 파라미터를 value 객체에 바인딩 할때**



스프링 프레임 워크에서 커스텀 타입 변환을 등록하는 방법은 크게 3가지가 있다.
1. propertyEditor : 문자 <=> 타입간의 변환
2. conversionService : 타입 <=> 타입간의 변환
3. formattingConversionService : 타입 <=> 타입간의 변환

1~3의 방법을 동시에 적용하는 것은 불가능 -> 왜냐, 아이디이름이 정해져있잖아. 
2,3의 경우 스프링 빈의 이름을 id="conversionService"로 사용하도록 스프링에서 강제함.

1번 : 생략
2번 : 2-1. 스프링에서 제공하는 ConversionServiceFactoryBean 클래스를 스프링 빈으로 등록
			(위에서 언급한 스프링 빈 이름을 준수해야함)
	  2-2. 해당 클래스의 converters 필드에 개발자가 만든 converter를 set으로 주입
	  		==> 개발자가 만드는 converter는 Converter 인터페이스를 구현하여 만든다.
	  		
3번 : 3-1. 스프링에서 제공하는 FormattingConversionServiceFactryBean 클래스를 스프링 빈으로 등록	  		
			(위에서 언급한 스프링 빈 이름을 준수해야함)
	  3-2. value객체에 어노테이션(으로 변환할 필드에) 적용
	  








	  		