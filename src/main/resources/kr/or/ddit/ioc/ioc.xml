<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- userDao, userService -->
	<!--  bean : 스프링 빈을 선언할 때 사용
		  id : 스프링 컨테이너에서 관리할 때 사용할 스프링 빈의 이름 - 중복이 되면 안된다.
		  class : 해당 스프링 빈을 생성하기 위한 구현체 클래스 full name - 근데 그냥 클래스 이름만 적어주면 중복될수 있으니까, 고유한 클래스명을 만들어주려고 패키지 명까지 적어준다. 
	 -->
	 
	<!-- userDao 스프링 빈 선언
		UserDaoImpl userDao = new userDaoImpl();
		이걸 아래 코드로 대체한거
		그리고 클래스 쓸때 user 하고 퀵피스하면 자동 완성 된다.	
	 -->
	<bean id ="userDao" class="kr.or.ddit.user.repository.UserDaoImpl"/> 
	
	
	<!-- userService 스프링 빈 선언
		UserService userService = new UserServiceImpl();
		userService.getUser("brown"); ==> ??
		
		property == field, setter
		
		private UserDao userDao;
		==> 여기서 userDao가 필드명이야. 아래 네임 속성 안에 넣으면돼
		
		value : 문자열, 숫자
		ref : 다른 스프링 빈, 주입 받고 싶은 스프링 빈 이름을 기술	
		
		property 엘리먼트를 이용하여 다른 스프링 빈을 (DI - Dependency Injection) 주입
		
		UserService userService = new userServiceImpl();
		userService.serUserDao(userDao);
		이게 아래 프로퍼티를 사용한거랑 같은거
	 -->
	<bean id="userService" class="kr.or.ddit.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>
	
	<!-- 
	
			DI(주입) 방식
		1. setter : setter 메소드가 존재 해야함(xml, java설정파일)
		2. 생성자 : 주입 받으려는 빈을 인자로 하는 생성자가 존재 해야함(xml, java설정파일)
		3. 어노테이션 : @Resource, @Autowired, @Inject (xml, java에서 설정가능한데 표면상으로 잘 드러나진 않음 - 이유는 다음에 설명) 	 ***이게 제일 많이 쓰임
 
	
	 -->
	
	<!--  생성자 주입  -->
	<!-- 2. 생성자 : 주입 받으려는 빈을 인자로 하는 생성자가 존재 해야함(xml, java설정파일) -->
	<bean id="userServiceCons" class="kr.or.ddit.user.service.UserServiceImpl">
		<constructor-arg ref="userDao"/>
	</bean>
	
	
	<!-- prototype : 해당 빈을 dl, di 할때마다 매번 새롭게 만든 객체를 반환 -->
	<bean id="userServicePrototype" class="kr.or.ddit.user.service.UserServiceImpl" scope="prototype">
		<property name="userDao" ref="userDao"></property>
	</bean>
	
	<!-- 이렇게 xml파일로 하는건 정부기관에서 일할때는 아직도 이걸씀... 근데 부트는 개인공부용. 부트가 훨 편해. 왜냐면 자바를 파탕으로하니까 컴파일되서 에러떠도 바로알아 -->
	<!--  list, set, map 컬렉션객체를 스프링 빈으로 등록 -->
	<bean id="collectionBean" class="kr.or.ddit.ioc.CollectionBean">
		<property name="list">
			<list>
				<value>brown</value>
				<value>sally</value>
				<value>cony</value>
			</list>
		</property>
		<property name="map">
			<map>
				<entry key="userid" value="brown"/>
				<entry key="usernm" value="브라운"/>
			</map>
		</property>
		<property name="set">
			<set>
				<value>brown</value>
				<value>sally</value>
				<value>cony</value>
			</set>
		</property>
		<property name="properties">
			<props>
				<prop key="userid">brown</prop>
				<prop key="usernm">브라운</prop>
			</props>
		</property>		
	</bean>
	
	<!-- properties 파일의 값을 스프링 빈의 값으로 주입하기 -->
	<!-- property-placeholder는 설정한 파일의 값만 로딩하는 것이 아니라 os의 환경변수도 같이 로딩한다.
		 dbinfo.properties에 선언한 username 속성은 os의 사용자 이름에 해당하는 환경변수와 겹친다.
		 그래서 테스트 돌렸을때 
		 org.junit.ComparisonFailure: expected:<[yez]> but was:<[PC-15]>
		 이렇게 뜸
		 
		 system-properties-mode="NEVER" 이렇게 하면 환경변수가 적용이 안되나?
		 이거 쓰면 테스트 통과됨
		 근데 그냥 명확하기 해주기 위해서 dbinfo.properties 에 이름들한테 jdbc.을 그냥 추가해줬어.
		 그럼 테스트 괜찮음
		 
		 
		 ==> property-placeholder의 system-properties-mode 속성을 "NEVER"로 설정한 경우
		 system property는 로딩하지 않고 location에 지정된 파일에서만 속성을 로딩한다.
	 -->
	 
	 
	 
	 
	 <!-- 이게 자바파일에 ioc패키지 안에 있는 config 사용할때 필요한 거-->
	<context:property-placeholder location="classpath:/kr/or/ddit/config/db/dbinfo.properties"/>
	<bean id="dbConfig" class="kr.or.ddit.ioc.DbConfig">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="userName" value="${jdbc.userName}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
</beans>









